<?php
/**
 * Maho
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2006-2020 Magento, Inc. (https://magento.com)
 * @copyright   Copyright (c) 2021-2022 The OpenMage Contributors (https://openmage.org)
 * @copyright   Copyright (c) 2024 Maho (https://mahocommerce.com)
 * @license     https://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<script type="text/javascript">

const inputTypeHiddenFields = <?= Mage::helper('core')->jsonEncode(Mage::helper('eav')->getInputTypeHiddenFields('catalog_product')) ?>;



function saveAndContinueEdit() {
    disableElements('save');
    var activeTab = product_attribute_tabsJsTabs.activeTab.id;
    if (editForm.submit($('edit_form').action+'back/edit/tab/' + activeTab) == false) {
        enableElements('save');
    }
    varienGlobalEvents.attachEventHandler('formValidateAjaxComplete', function () {
        enableElements('save');
    });
}

function saveAttribute() {
    disableElements('save');
    if (editForm.submit() == false) {
        enableElements('save');
    }
    varienGlobalEvents.attachEventHandler('formValidateAjaxComplete', function () {
        enableElements('save');
    });
}


function getInputTypeValue() {
    const el = document.getElementById('frontend_input');
    if (el) {
        return el.value;
    }
    return '';
}

function setRowVisibility(id, isVisible) {
    const el = document.getElementById(id);
    if (el) {
        const tr = el.closest('tr');
        if (isVisible) {
            tr.classList.remove('no-display');
        } else {
            tr.blur();
            tr.classList.add('no-display');
        }
    }
}

function setFieldsetVisibility(id, isVisible) {
    const el = document.getElementById(id);
    if (el) {
        if (isVisible) {
            el.classList.remove('no-display');
            el.previousElementSibling.classList.remove('no-display');
        } else {
            el.classList.add('no-display');
            el.previousElementSibling.classList.add('no-display');
        }
    }
}




function checkOptionsPanelVisibility() {
    const panelEl = document.querySelector('#manage-options-panel, #matage-options-panel');
    if (!panelEl) {
        return;
    }

    const optionDefaultInputTypes = {
        select: 'radio',
        customselect: 'radio',
        multiselect: 'checkbox',
    }
    const optionDefaultInputType = optionDefaultInputTypes[getInputTypeValue()];

    if (optionDefaultInputType) {
        panelEl.classList.remove('no-display');
        panelEl.querySelectorAll('default[]').forEach((el) => {
            el.type = optionDefaultInputType;
        });
    } else {
        panelEl.classList.add('no-display');
    }

    if ($F('frontend_input')=='select' && $F('is_required')==1) {
        $('option-count-check').addClassName('required-options-count');
    } else {
        $('option-count-check').removeClassName('required-options-count');
    }
}



function bindAttributeInputType()
{
    console.log('bindAttributeInputType');

    const inputType = getInputTypeValue();

    checkOptionsPanelVisibility();

    switchDefaultValueField();

    // todo
    // if($('backend_type') && $('backend_type').options) {
    //     for(var i=0;i<$('backend_type').options.length;i++) {
    //         if($('backend_type').options[i].value=='int') {
    //             $('backend_type').selectedIndex = i;
    //         }
    //     }
    // }

}


function switchDefaultValueField()
{
    const inputType = getInputTypeValue();


    var defaultValueTextVisibility = false;
    var defaultValueTextareaVisibility = false;
    var defaultValueDateVisibility = false;
    var defaultValueYesnoVisibility = false;


    setFieldsetVisibility('front_fieldset', true);

    switch (inputType) {
        <?php foreach (Mage::helper('catalog')->getAttributeHiddenFields() as $type=>$fields): ?>
            case '<?= $type ?>':
                <?php foreach ($fields as $one): ?>
                    <?php if ($one == '_front_fieldset'): ?>
                        setFieldsetVisibility('front_fieldset', false);
                    <?php elseif ($one == '_default_value'): ?>
                        defaultValueTextVisibility =
                        defaultValueTextareaVisibility =
                        defaultValueDateVisibility =
                        defaultValueYesnoVisibility = false;
                    <?php elseif ($one == '_scope'): ?>
                        scopeVisibility = false;
                    <?php else: ?>
                        setRowVisibility('<?= $one ?>', false);
                    <?php endif ?>
                <?php endforeach ?>
            break;
        <?php endforeach ?>
    }

    setRowVisibility('default_value_text', defaultValueTextVisibility);
    setRowVisibility('default_value_textarea', defaultValueTextareaVisibility);
    setRowVisibility('default_value_date', defaultValueDateVisibility);
    setRowVisibility('default_value_yesno', defaultValueYesnoVisibility);

}



const frontendInputEl = document.getElementById('frontend_input');
if (frontendInputEl) {
    frontendInputEl.addEventListener('change', bindAttributeInputType);
}

const isRequiredEl = document.getElementById('is_required');
if (isRequiredEl) {
    isRequiredEl.addEventListener('change', checkOptionsPanelVisibility);
}

bindAttributeInputType();


////////////////////////////////////////////////////////////////////////////////
// Product attribute specific code

function updateApplyToValues() {
    const inputType = getInputTypeValue();

    var applyToSelect = $('apply_to');
    switch (inputType) {
        <?php foreach (Mage::helper('catalog')->getAttributeDisabledTypes() as $type=>$disabled): ?>
            case '<?= $type ?>':
            <?php foreach ($disabled as $one): ?>
                disableApplyToValue('<?= $one ?>');
            <?php endforeach ?>
            break;
        <?php endforeach ?>
        default:
        for (i=0;i<applyToSelect.options.length;i++) {
            applyToSelect.options[i].disabled = false;
        }
        break;
    }
}

function toggleApplyVisibility(select) {
    if ($(select).value == 1) {
        $(select).next('select').removeClassName('no-display');
        $(select).next('select').removeClassName('ignore-validate');

    } else {
        $(select).next('select').addClassName('no-display');
        $(select).next('select').addClassName('ignore-validate');
        var options = $(select).next('select').options;
        for( var i=0; i < options.length; i++) {
            options[i].selected = false;
        }
    }
}

function disableApplyToValue(value) {
    var applyToSelect = $('apply_to');
    for (i=0;i<applyToSelect.options.length;i++) {
        if (value == applyToSelect.options[i].value) {
            applyToSelect.options[i].disabled = true;
            applyToSelect.options[i].selected = false;
        }
    }
}

if($('frontend_input')) {
    Event.observe($('frontend_input'), 'change', updateApplyToValues);
}
updateApplyToValues();

</script>
